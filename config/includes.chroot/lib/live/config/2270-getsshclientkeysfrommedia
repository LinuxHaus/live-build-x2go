#!/bin/sh


GetSSHClientKeysFromMedia ()
{
	# Output startup message
	#
	echo -n " getsshclientkeysfrommedia"
	if grep -q "\W*copysecring\W*" /proc/cmdline ; then
		(

			# This script is for using the iso-hybrid image along with the "second partition" patch
			# or other suitable storage media. When used with the iso-hybrid image for X2Go in portable mode,
			# it allows you to share ssh secret keys between X2GoClient for Windows in portable
			# mode and the X2Go-ThinClientEnvironment on the same USB media using different partitions.
			# It also allows you to use USB media with your key on it together with a net-booted Debian Live, for example.

			check_for_config (){
				if [ -d $1/config/ssh ] || [ -d $1/ssh ] || [ -d $1/.ssh ]; then
					echo -n "\n$(date +'%F | %T | ')'$0' Keyfile directory found at '$1/config/ssh', '$1/ssh', or '$1/./ssh'." | tee -a /dev/tty8
					# create .ssh-Directory in case it doesn't exist
					#
					mkdir -p $(readlink -m "$USERHOME/.ssh")
					chown   $TARGETUSERNAME: \
						$(readlink -m "$USERHOME/.ssh")
					chmod   700 \
						$(readlink -m "$USERHOME/.ssh")

					# any keyfile in the config dir will be copied over to live system
					#
					for KEYFILE in $1/config/ssh/* $1/ssh/* $1/.ssh/* ; do
						([ -f "$KEYFILE" ] && [ -s "$KEYFILE" ]) || continue
						egrep -q "BEGIN .*(PRIVATE|PUBLIC) KEY" "$KEYFILE" || continue
						echo -n "\n$(date +'%F | %T | ')'$0' Keyfile '$KEYFILE' found, copying and adjusting ownership and permissions on destination." | tee -a /dev/tty8
						KEYDESTPATH="$USERHOME/.ssh/$(basename "$KEYFILE")"
						touch "$KEYDESTPATH"
						chown   $TARGETUSERNAME: \
							$KEYDESTPATH
						chmod   600 $KEYDESTPATH
						cat     $(readlink -m "$KEYFILE")>$KEYDESTPATH

					done

					# this is so the path name in the sessions file matches again
					# (cannot use .ssh on FAT, for example)
					#
					ln -s $USERHOME/.ssh $USERHOME/ssh

					return 0
				else
					return 1
				fi
			}

			while ! [ -c /dev/tty8 ] ; do
				echo -n "\n$(date +'%F | %T | ')'$0' is waiting for tty8 to become available."
				sleep 2
			done

			while ! [ -e /var/lib/live/config/opensshkeys ] ; do
				echo -n "\n$(date +'%F | %T | ')'$0' is waiting for getsshhostkeysfrommedia to finish."
				sleep 2
			done

			# Homedir of user account
			# if we're a MATE-MiniDesktop, let this be our homedirectory
			USERHOME=$(getent passwd x2gothinclient | awk -F':' '{ print $6 }')
			# No Match? Then we're a regular TCE-Live.
			if [ -z "$USERHOME" ] ; then
				USERHOME=$(getent passwd 1000 | awk -F':' '{ print $6 }')
				TARGETUSERNAME=$(getent passwd 1000 | awk -F':' '{ print $1 }')
			else
				# let's not forget to set the target user name if we're MATE-MiniDesktop
				TARGETUSERNAME="x2gothinclient"
			fi

			# list devices (and mountpoints, if present)
			LABELMPLIST=$(lsblk -oLABEL,NAME,MOUNTPOINT,HOTPLUG -ln)

			# search for our magic label
			X2GOTCELIVELABELS=$(echo "$LABELMPLIST" | awk '$3~/^[^\/]/ && $3="" ; $1=="X2GO-TCE-LIVE" { print $2 " " $3 " " $4}')

			# support for second label value (for dual-mode media where keys are stored on the windows-readable partition)
			PORTABLEAPPLABELS=$(echo "$LABELMPLIST" | awk '$3~/^[^\/]/ && $3="" ; $1=="PORTABLEAPP" { print $2 " " $3 " " $4}')

			# block device list, removable first (we want USB media to be able to override keys on fixed disks)
			BLOCKDEVS="$(echo "$X2GOTCELIVELABELS\n$PORTABLEAPPLABELS" | awk '$3 == "1" {print $2}') $(echo "$X2GOTCELIVELABELS\n$PORTABLEAPPLABELS" | awk '$3 == "0" {print $2}')"

			# for every block device in our list, do ...
			for BLOCKDEV in $BLOCKDEVS; do 
				# check if it also appears in the list of devices carrying our magic label
				# this should always be the case since we changed how BLOCKDEVS is assembled
				NEXTDEVICE=$(echo "$X2GOTCELIVELABELS\n$PORTABLEAPPLABELS" | grep "$BLOCKDEV")
				if [ -n "$NEXTDEVICE" ] ; then
					# now figure out the mountpoint
					MNTPT=$(echo $NEXTDEVICE | awk '{print $2}')
					# and the device name? Wait, this is the magic label instead.
					NEXTDEVICE=$(echo $NEXTDEVICE | awk '{print $1}')
					echo -n "\n$(date +'%F | %T | ')'$0' Checking status of Device '$NEXTDEVICE' for BLOCKDEV '$BLOCKDEV'." | tee -a /dev/tty8
					if [ -n "$MNTPT" ] ; then
						# If the mountpoint variable isn't empty, it means the device is already mounted.
						echo -n "\n$(date +'%F | %T | ')'$0' Device '$NEXTDEVICE' is mounted at: '$MNTPT'" | tee -a /dev/tty8
						# so let's check if we have a config directory at that mountpoint.
						if check_for_config $MNTPT ; then
							# if we managed to pull a config off of it (or save one on it), we make a note of this ...
							touch /var/lib/live/config/opensshclientkeys
							# and quit right here.
							exit 0
						fi
					else
						# So there's no active mount for the device with our magic label ...
						echo -n "\n$(date +'%F | %T | ')'$0' Device '$NEXTDEVICE' is not mounted." | tee -a /dev/tty8
						# let's see if this is a fixed disk.
						if grep -q "^0$" /sys/block/$BLOCKDEV/removable ; then
							# yes, it is, so let's go ahead and try to mount it ...
							echo -n "\n$(date +'%F | %T | ')'$0' Device '$NEXTDEVICE' is a fixed disk, mounting ..." | tee -a /dev/tty8
							# obviously, we need a mountpoint for it ...
							mkdir -p /media/fixeddisks/$NEXTDEVICE
							# and now we can try to mount it. Let's do it in readonly mode, just to play it safe.
							mount -o ro /dev/$NEXTDEVICE /media/fixeddisks/$NEXTDEVICE
							if check_for_config /media/fixeddisks/$NEXTDEVICE ; then
								# we umount, then make a note that we succeeded ...
								umount /media/fixeddisks/$NEXTDEVICE
								touch /var/lib/live/config/opensshclientkeys
								# and quit right here.
								exit 0
							fi
							# If we didn't succeed in pulling a config, we still need to umount what we mounted.
							umount /media/fixeddisks/$NEXTDEVICE
						else
							# If a removable disk hasn't been mounted by the automounter, something's amiss and we shouldn't try to meddle with it.
							# So let's make a note of this and move on.
							echo -n "\n$(date +'%F | %T | ')'$0' Device '$NEXTDEVICE' is a removable disk, not mounted by automounter, skipping." | tee -a /dev/tty8
						fi
					fi
				fi
			done
			# Now let's leave a mark saying that we're done, so the next script can pick up on it.
			echo "BLOCKDEVS: '$BLOCKDEVS'" > /var/lib/live/config/opensshclientkeys
			echo "X2GOTCELIVELABELS: '$X2GOTCELIVELABELS'" >> /var/lib/live/config/opensshclientkeys
			echo "PORTABLEAPPLABELS: '$PORTABLEAPPLABELS'" >> /var/lib/live/config/opensshclientkeys
		) &
	fi
}

GetSSHClientKeysFromMedia

